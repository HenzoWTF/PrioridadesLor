@page "/"

@rendermode InteractiveServer
@inject PrioridadesBLL prioridadesBLL
@inject NavigationManager NavigationManager


<PageTitle>Registro Propiedades</PageTitle>

<EditForm Model = "prioridades" OnValidSubmit="Guardar" >
    <DataAnnotationsValidator/>
    
    <a href="/Inicio" class="btn btn-outline-primary">Inicio</a>

    <div class= "container" >
        <div class= "card shadow-lg" >
            <div class= "card-header" >
                <h3> Registro de Propiedades</h3>
            </div>
            <div class=card-body>

                @*Prioridad Id *@
                <div class= "col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label > Id Prioridad </label >
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value = "prioridades.IdPrioridad" class= "form-control" aria-describedby="BotonBuscar"/>
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class="bi bi-search"></i></button>
                        <ValidationMessage For="@(() => prioridades.IdPrioridad)"/>
                    </div >
                </div >

                @*Descripcion *@
                <div class="mb-3" >
                    <label class="form-label" for="Descripcion" > Descripción:</label >
                    <InputText @bind-Value= "prioridades.Descripcion" class="form-control" />
                    <ValidationMessage For ="@(() => prioridades.Descripcion)" />
                </div >

                @*Dias Compromiso *@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4" >
                    <label > Días Compromiso </label >
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value = "prioridades.DiasCompromiso" class="form-control"/>
                        <ValidationMessage For ="@(()=>prioridades.DiasCompromiso)"/>
                    </div >
                </div >

                <div class= "card-footer d-flex justify-content-center" >
                    <div class= "btn-group" >
                        <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><i class="bi bi-file-earmark" /> Nuevo</button>
                        <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy" /> Guardar</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="bi bi-trash" /> Eliminar</button>
                    </div >
                </div >

            </div >
        </div >

        @Mensaje
    </div >

</EditForm>


@code {
    [Parameter]
    public int IdPrioridad { get; set; }
    public string Mensaje { get; set; } = "";
    public Prioridades prioridades { get; set; } = new Prioridades();

    protected override void OnInitialized()
    {
        if (IdPrioridad > 0)
        {
            this.prioridades.IdPrioridad = IdPrioridad;
            this.Buscar();
        }
    }

    public void Buscar()
    {
        var prioridadEncontrada = prioridadesBLL.Buscar(prioridades.IdPrioridad);
        if (prioridadEncontrada != null)
        {
            this.prioridades = prioridadEncontrada;
        }
        else
        {

            Mensaje = "No se encuentra nada en este Id";
            Nuevo();
        }
    }

    public void Nuevo()
    {
        this.prioridades = new Prioridades();
    }

    public void Repetido()
    {
        if (!Validar())
        {
            return;
        }
        if (prioridades.Descripcion == prioridades.Descripcion)
        {
            this.Eliminar();
        }
    }

    public void Guardar()
    {
        if (string.IsNullOrWhiteSpace(prioridades.Descripcion))
        {
            Mensaje = "Es obligatorio que se rellenen todos los campos";
            return;
        }


        if (!Validar())
        {
            Mensaje = "Es obligatorio que se rellenen todos los campos";
            this.Nuevo();
        }

        if (prioridadesBLL.Guardar(this.prioridades))
        {
            Mensaje ="Se guardo exitosamente";
            this.Nuevo();

        }
    }

    public bool Validar()
    {
        return prioridades.Descripcion != null && prioridades.DiasCompromiso > 0 && prioridades.DiasCompromiso <= 32;
    }

    public void Eliminar()
    {
        Buscar();
        if (prioridadesBLL.Eliminar(this.prioridades))
        {
            Mensaje = "Se elimino exitosamente";
            this.Nuevo();
        }
    }
}