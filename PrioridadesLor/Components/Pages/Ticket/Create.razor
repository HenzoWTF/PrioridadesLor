@page "/Ticket"
@using System.Linq.Expressions


@rendermode InteractiveServer

@attribute [StreamRendering]
@inject TicketsService TicketsService
@inject PrioridadesService prioridadesService
@inject ClientesService clientesService
@inject SistemasService sistemasService
@inject NavigationManager navigationManager

<PageTitle>Ticket</PageTitle>


<EditForm Model="@tickets" OnValidSubmit="@OnValidSubmit">

    <DataAnnotationsValidator />   <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3> Crear Ticket</h3>

                <div class=card-body>

                    @*ID*@
                    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                        <label>ID</label>
                        <div class="input-group mb-3">
                            <InputNumber @bind-Value="@tickets.TicketsId" class=" form-control" />
                            <ValidationMessage For="@(() => tickets.TicketsId)" />
                        </div>
                    </div>

                    @*Fecha*@
                    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                        <label>Fecha</label>
                        <div class="input-group mb-3">
                            <InputDate id="fecha" class="form-control" @bind-Value="tickets.Fecha"/>
                            <ValidationMessage For="@(() => tickets.Fecha)" />
                        </div>
                    </div>

                    @*Solicitado por*@
                    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                        <label>Solicitado por</label>
                        <div class="input-group mb-3">
                            <InputText id="solicitado" class="form-control" @bind-Value="tickets.SolicitadoPor" placeholder="Ingrese el nombre del solicitante"></InputText>
                            <ValidationMessage For="@(() => tickets.SolicitadoPor)"/>
                        </div>
                    </div>

                    @*Clientes ID*@
                    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                        <label>Clientes Id</label>
                        <InputSelect @bind-Value="tickets.ClientesId" class="form-select">
                            @foreach (var cliente in clientesList)
                            {
                                <option value="@cliente.ClientesID">@cliente.ClientesID</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => tickets.ClientesId)" />
                    </div>

                    @*Sistema *@
                    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                        <label>Sistema</label>
                        <div class="input-group mb-3">
                            <InputSelect id="sistemaid" class="form-select" @bind-Value="tickets.SistemasId">
                              <option value="0">Seleccione un sistema</option>
                                @foreach (var sistemas in sistemasList)
                                {
                                    <option value="@sistemas.SistemasId">@sistemas.SistemasNombres</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => tickets.SistemasId)"></ValidationMessage>
                        </div>
                    </div>


                    @*Descpcion*@
                    <label>Descripci&oacute;n</label>
                    <div class="input-group mb-3">
                        <InputText id="descripcion" class="form-control" @bind-Value="tickets.Descripcion" placeholder="Ingrese una descripci&oacute;n"></InputText>
                        <ValidationMessage For="@(() => tickets.Descripcion)"/>
                    </div>

                    @*Prioridad ID*@
                    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                        <label>Prioridad Id</label>
                        <InputSelect @bind-Value="tickets.PrioridadesId" class="form-select">
                            @foreach (var prioridades in prioridadesList)
                            {
                                <option value="@prioridades.IdPrioridades">@prioridades.IdPrioridades</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => tickets.PrioridadesId)" />
                    </div>


                    @*Asunto*@
                    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                        <label>Asunto</label>
                        <div class="input-group mb-3">
                            <InputText id="asunto" class="form-control" @bind-Value="tickets.Asunto" placeholder="Ingrese un asunto"></InputText>
                            <ValidationMessage For="@(() => tickets.Asunto)"></ValidationMessage>
                        </div>
                    </div>


                    <div class="card-footer d-flex justify-content-center">
                        <div class="btn-group">
                            <button class="btn btn-outline-success"><i class="bi bi-floppy-fill " /> Guardar</button>
                            <a href="Consulta_Ticket" class="btn btn-outline-primary"><i class="bi bi-arrow-left" /> Volver</a>
                        </div>
                    </div>

                </div>
            </div>
        </div>

    </div>


</EditForm>


@code {
    [Parameter] public int Id { get; set; }
    public Tickets tickets { get; set; } = new Tickets();
    public List<Clientes> clientesList = new List<Clientes>();
    public List<Sistemas> sistemasList = new List<Sistemas>();
    public List<Prioridades> prioridadesList = new List<Prioridades>();

    protected override async Task OnInitializedAsync()
    {
        Expression<Func<Clientes, bool>> criterioCliente = cliente => cliente.ClientesID > 0;
        clientesList = await clientesService.Listar(criterioCliente);

        Expression<Func<Sistemas, bool>> criterioSistema = sistema => sistema.SistemasId > 0;
        sistemasList = await sistemasService.Listar(criterioSistema);

        Expression<Func<Prioridades, bool>> criterioPrioridad = prioridad => prioridad.IdPrioridades > 0;
        prioridadesList = await prioridadesService.GetList(criterioPrioridad);

        if (Id != 0)
        {
            tickets = await TicketsService.Buscar(Id);
        }
    }

    public void Nuevo()
    {
        tickets = new Tickets();
    }

    private async void OnValidSubmit()
    {

        if (await TicketsService.Guardar(tickets))
        {
            Nuevo();
        }

        navigationManager.NavigateTo("Consulta_Ticket");
    }

    public async Task ActualizarClienteId(string valor)
    {
        if (valor != null)
        {
            var buscar = await clientesService.BuscarClientes(valor);
            if (buscar != null)
            {
                var id = await clientesService.Buscar(buscar.ClientesID);
                if (id != null)
                    tickets.ClientesId = id.ClientesID;
            }
        }
    }

    public async Task ActualizarPrioridadId(string valor)
    {
        if (valor != null)
        {
            var buscar = await prioridadesService.BuscarDescripcion(valor);
            if (buscar != null)
            {
                var id = await prioridadesService.Buscar(buscar.IdPrioridades);
                if (id != null)
                    tickets.PrioridadesId = id.IdPrioridades;
            }
        }
    }

}
