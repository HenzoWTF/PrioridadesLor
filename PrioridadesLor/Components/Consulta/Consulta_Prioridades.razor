@page "/Consulta_Prioridades"

@rendermode InteractiveServer
@inject PrioridadesService prioridadesServices
@inject NavigationManager navigationManager

<PageTitle>Consulta de Prioridades</PageTitle>

<h1>Consulta de Prioridades</h1>


<div>
    <a href="/Prioridad"><i>Agregar Prioridad</i></a>
</div>

<table class="table">

    <thead>
        <tr bgcolor="skyblue">
            <th>Id Prioridades</th>
            <th>Descripci&oacuten</th>
            <th>D&iacuteas Compromiso</th>
            <th> </th>
        </tr>
    </thead>

    <tbody>
        @if (prioridades.Count == 0)
        {
            @: No existe registros
        }
        @foreach (var Prioridades in prioridades)
        {
            <tr>
                <td>@Prioridades.IdPrioridades</td>
                <td>@Prioridades.Descripcion</td>
                <td>@Prioridades.DiasCompromiso</td>
                <td>
                    <a href="/Prioridad/@Prioridades.IdPrioridades"><i class="bi bi-pencil-square" /></a>
                    <a href="/Eliminar_Prioridad/@Prioridades.IdPrioridades" class="link-danger"><i class="bi bi-trash" /></a>
                </td>
            </tr>

        }
    </tbody>
</table>


@code {
    public List<Prioridades> prioridades { get; set; } = new List<Prioridades>();
    public Prioridades PrioridadesP { get; set; } = new Prioridades();

    protected override async Task OnInitializedAsync()
    {
        prioridades = await prioridadesServices.GetList(c => true);
    }

    public void Nuevo()
    {
        PrioridadesP = new Prioridades();
    }

    public async void Buscar()
    {
        var PrioridadEncontrado = await prioridadesServices.Buscar(PrioridadesP.IdPrioridades);
        if (PrioridadEncontrado != null)
            PrioridadesP = PrioridadEncontrado;
        else
        {
            Nuevo();
        }
    }
}